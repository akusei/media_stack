---
- name: Check for existing plex claim token
  # noqa risky-shell-pipe
  shell: grep "PLEX_CLAIM=" ./.env | tr -d '\n' | cut -d '=' -f 2
  args:
    chdir: "{{ common_install_root }}/plex"
  register: plex_claim
  changed_when: false
  failed_when: false

# 2FA has made this process undoable at the moment
# Must add --extra-vars plex_auth_token=token on the CLI
# can get the token from plex cookie when logged into plex.tv

# - name: Get Plex login token
#  uri:
#    url: https://plex.tv/users/sign_in.json
#    method: POST
#    headers:
#      X-Plex-Client-Identifier: "watch.{{ vault_domain }}"
#      X-Plex-Product: Plex SSO
#      X-Plex-Version: V1
#    body: "user[login]={{ vault_plex_username }}&user[password]={{ vault_plex_password }}"
#    status_code: 201
#    body_format: raw
#  register: login_token
#  when: not plex_claim.stdout

# - name: Get Plex claim token
#  uri:
#    url: https://plex.tv/api/claim/token.json
#    method: GET
#    headers:
#      X-Plex-Client-Identifier: "watch.{{ vault_domain }}"
#      X-Plex-Product: Plex SSO
#      X-Plex-Token: "{{ login_token.json.user.authToken }}"
#    status_code: 200
#  register: claim_token
#  when: not plex_claim.stdout

- name: Get Plex claim token
  uri:
    url: https://plex.tv/api/claim/token.json
    method: GET
    headers:
      X-Plex-Client-Identifier: "watch.{{ vault_domain }}"
      X-Plex-Product: Plex SSO
      X-Plex-Token: "{{ plex_auth_token | default(omit) }}"
    status_code: 200
  register: claim_token
  when: not plex_claim.stdout

- name: Set plex claim fact
  set_fact:
    plex_claim_token: >-
      {{ claim_token.json.token | default(plex_claim.stdout) }}

- name: Ensure restart for claim token
  command:
    cmd: echo 'claim token'
  when: plex_claim_token != plex_claim.stdout
  notify: restart plex
